#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#define deb(x) cout << #x << " : " << x << '\n'
#define logn(x) cout << x << '\n'
#define logs(x) cout << x << ' '
#define log(x) cout << x
#define MOD 1000000007
#define uInt unsigned long long int
#define Int long long int

using namespace std;

template <typename T, typename U>
void debArr(T arr[], U n)
{
	for (U i = 0; i <= n - 1; i++)
	{
		logs(arr[i]);
	}
	log(endl);
}

template <typename T>
void debVect(vector<T> arr)
{
	for (auto i : arr)
	{
		logs(i);
	}
	log(endl);
}

Int gcd(const Int &a, const Int &b, Int &x, Int &y)
{
	/*
	Extended Euclidean
	gcd(a,b) = ax + by
	*/
	if (b == 0)
	{
		x = 1;
		y = 0;
		return a;
	}
	Int x1, y1;
	Int g = gcd(b, a % b, x1, y1);
	x = y1;
	y = x1 - (a / b) * y1;
	return g;
}

bool anySolution(const Int &a, const Int &b, const Int &c, Int &g, Int &x, Int &y)
{
	/*
	Solution to for Diophantine Equation
	Ax+By=C exits iff C|gcd(A,B,x,y)
	Then one solution is given by
	sol_x=x*(c/gcd) , sol_y=y*(c/gcd)
	*/
	g = gcd(abs(a), abs(b), x, y);
	if (c % g == 0)
	{
		Int m = c / g;
		x = x * m;
		y = y * m;
		if (a < 0)
			x = -x;
		if (b < 0)
			y = -y;
		return true;
	}
	return false;
}

void solve(const Int &a, const Int &b, const Int &c)
{
	/*
	Linear Diophantine Equation
	is equation of form Ax+By=C where A,B,C are integers
	*/
	Int x, y, g;
	if (!anySolution(a, b, c, g, x, y))
	{
		logn("No solution exist");
		return;
	}
	/*
	If solution exits, x and y has one solution
	other infinite solutions can be found using
	(x+k*(b/g) , y-k*(a/g))
	where k can be any integer
	*/
	logn("One Solution : ");
	deb(x);
	deb(y);
	logn("General Solution : ");
	cout << "x : " << x << " + " << b / g << "k" << endl;
	cout << "y : " << y << " - " << a / g << "k" << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	solve(19, 13, 20);

	return 0;
}
